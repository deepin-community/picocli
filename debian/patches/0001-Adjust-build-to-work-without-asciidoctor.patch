From: Miroslav Kravec <kravec.miroslav@gmail.com>
Date: Sat, 26 Jan 2019 19:31:42 +0100
Subject: Adjust build to work without the following plugins:
 - asciidoctor
 - bnd (so no OSGi metadata)
 - org.beryx:badass-jar (so no multi-version JARs)
 and with default java
Last-update: 2021-11-21
Forwarded: not-needed

--- a/build.gradle
+++ b/build.gradle
@@ -1,61 +1,8 @@
-import aQute.bnd.gradle.Bundle
-
 group 'info.picocli'
 description 'Java command line parser with both an annotations API and a programmatic API. Usage help with ANSI styles and colors. Autocomplete. Nested subcommands. Easily included as source to avoid adding a dependency.'
 version "$projectVersion"
 ext.moduleName = 'info.picocli'
 
-buildscript {
-    repositories {
-        maven {
-            url "https://plugins.gradle.org/m2/"
-        }
-        mavenCentral()
-    }
-
-    dependencies {
-        classpath "org.asciidoctor:asciidoctor-gradle-jvm:$asciidoctorGradlePluginVersion"
-        classpath 'org.asciidoctor:asciidoctorj-pdf:1.5.4'
-        classpath "gradle.plugin.org.beryx:badass-jar:1.1.3"
-        classpath 'biz.aQute.bnd:biz.aQute.bnd.gradle:5.1.2'
-    }
-}
-
-apply plugin: "org.beryx.jar"
-
-if (System.getenv('MAVEN_OSS_USER')) { // on home system
-    apply plugin: 'biz.aQute.bnd.builder'
-} else {
-    try { // otherwise, only apply if available
-        Class.forName('aQute.bnd.gradle.BndPlugin')
-        Class.forName('aQute.bnd.build.Project')
-        apply plugin: 'biz.aQute.bnd.builder'
-    } catch (Throwable ignored) {}
-}
-pluginManager.withPlugin('biz.aQute.bnd.builder') { // if plugin applied, execute this action
-    configurations {
-        bundleCompile
-        baseline
-    }
-    dependencies {
-        baseline('group': group, 'name': jar.archiveBaseName) {
-            version {
-                strictly "(,${jar.archiveVersion}["
-            }
-            transitive = false
-        }
-    }
-    sourceSets {
-        bundle
-    }
-    task bundle(type: Bundle) {
-        from sourceSets.bundle.output
-        bndfile = 'bnd.bnd'
-        sourceSet = sourceSets.bundle
-    }
-}
-
-
 allprojects {
     apply plugin: 'java'
     apply plugin: 'java-library' // to avoid https://github.com/gradle/gradle/issues/1118
@@ -103,7 +50,7 @@
     }
 }
 
-sourceSets.main.java.srcDirs = ['src/main/java', 'src/main/java9']
+sourceSets.main.java.srcDirs = ['src/main/java']
 compileJava {
     inputs.property("moduleName", moduleName)
     doFirst {
@@ -116,20 +63,6 @@
     }
 }
 
-jar {
-    manifest {
-        attributes 'Specification-Title'   : 'picocli',
-                   'Specification-Vendor'  : 'Remko Popma',
-                   'Specification-Version' : archiveVersion.get(),
-                   'Implementation-Title'  : 'picocli',
-                   'Implementation-Vendor' : 'Remko Popma',
-                   'Implementation-Version': archiveVersion.get(),
-                   'Main-Class'            : 'picocli.AutoComplete'
-    }
-    // copy module-info.class to META-INF/versions/9
-    multiRelease = true
-}
-
 // jacoco 0.8.2 does not work with Java 13; gradle 4.x has no JavaVersion enum value for Java 12
 if (org.gradle.api.JavaVersion.current().isJava11Compatible()) {
     project.logger.lifecycle("skipping jacoco test for Java version ${org.gradle.api.JavaVersion.current()}")
--- a/picocli-codegen/build.gradle
+++ b/picocli-codegen/build.gradle
@@ -29,24 +29,11 @@
 //generateGraalReflectionConfig.dependsOn(compileJava)
 //jar.dependsOn(generateGraalReflectionConfig)
 
-jar {
-    manifest {
-        attributes 'Specification-Title'   : 'Picocli Code Generation',
-                   'Specification-Vendor'  : 'Remko Popma',
-                   'Specification-Version' : archiveVersion.get(),
-                   'Implementation-Title'  : 'Picocli Code Generation',
-                   'Implementation-Vendor' : 'Remko Popma',
-                   'Implementation-Version': archiveVersion.get(),
-                   'Automatic-Module-Name' : 'info.picocli.codegen'
-    }
-}
-
-
 task generateManpageAsciiDoc(type: JavaExec) {
     dependsOn(classes)
     group = "Documentation"
     description = "Generate AsciiDoc manpage"
-    classpath(configurations.compileClasspath, configurations.annotationProcessor, sourceSets.main.runtimeClasspath)
+    classpath(configurations.compileClasspath, sourceSets.main.runtimeClasspath)
     main 'picocli.codegen.docgen.manpage.ManPageGenerator'
     args 'picocli.codegen.docgen.manpage.ManPageGenerator$App',
             'picocli.codegen.aot.graalvm.DynamicProxyConfigGenerator$App',
@@ -62,18 +49,6 @@
     }
 }
 
-apply plugin: 'org.asciidoctor.jvm.convert'
-asciidoctor {
-    dependsOn(generateManpageAsciiDoc)
-    sourceDir = file("${project.buildDir}/picocli-generated-docs")
-    outputDir = file("${project.buildDir}/docs")
-    logDocuments = true
-    outputOptions {
-        backends = ['manpage', 'html5']
-    }
-}
-javadoc.dependsOn('asciidoctor')
-
 ext {
     PUBLISH_GROUP_ID = group
     PUBLISH_ARTIFACT_ID = project.name
--- a/gradle/docs.gradle
+++ b/gradle/docs.gradle
@@ -1,13 +1,4 @@
 apply plugin: 'java'
-apply plugin: 'org.asciidoctor.jvm.convert'
-pluginManager.withPlugin('org.asciidoctor.jvm.convert') { // if plugin applied, execute this action
-    configurations {
-        tabbedCodeExt
-    }
-    dependencies {
-        tabbedCodeExt "com.bmuschko:asciidoctorj-tabbed-code-extension:0.3"
-    }
-}
 
 Map<org.gradle.api.JavaVersion, String> linkMap = org.gradle.api.JavaVersion.values().collectEntries { version ->
     [(version) : 'https://docs.oracle.com/javase/8/docs/api/']
@@ -41,19 +32,3 @@
     }
 }
 javadoc.dependsOn(jar)
-javadoc.dependsOn('asciidoctor')
-asciidoctorj {
-    version = '2.4.3'
-}
-asciidoctor {
-    sourceDir = file('docs')
-    outputDir = file('build/docs')
-    logDocuments = true
-    configurations 'tabbedCodeExt'
-    baseDirFollowsSourceDir()
-//    backends 'pdf', 'html'
-//    attributes 'sourcedir': file('docs') //project.sourceSets.main.java.srcDirs[0]
-////    attributes 'pdf-stylesdir': 'theme',
-////               'pdf-style': 'custom',
-////               'sourcedir': file('docs') //project.sourceSets.main.java.srcDirs[0]
-}
--- a/picocli-examples/generate-man-pages/example-gradle-project/build.gradle
+++ b/picocli-examples/generate-man-pages/example-gradle-project/build.gradle
@@ -1,22 +1,6 @@
-buildscript {
-    repositories {
-        jcenter()
-        maven {
-            url "https://plugins.gradle.org/m2/"
-        }
-        mavenCentral()
-    }
-
-    dependencies {
-        classpath "org.asciidoctor:asciidoctor-gradle-jvm:3.3.2"
-    }
-}
-
 plugins {
     id 'java'
 }
-apply plugin: 'org.asciidoctor.jvm.convert'
-
 
 group 'org.mycompany.myproject'
 version '1.0-SNAPSHOT'
@@ -50,18 +34,6 @@
     args project.ext.mainClassName, "--outdir=${project.buildDir}/generated-picocli-docs", "-v", "--template-dir=src/docs/mantemplates"
 }
 
-apply plugin: 'org.asciidoctor.jvm.convert'
-asciidoctor {
-    dependsOn(generateManpageAsciiDoc)
-    sourceDir = file("${project.buildDir}/generated-picocli-docs")
-    outputDir = file("${project.buildDir}/docs")
-    logDocuments = true
-    outputOptions {
-        backends = ['manpage', 'html5']
-    }
-}
-assemble.dependsOn(asciidoctor)
-
 // We can now use the Gradle `distribution` plugin to include
 // the generated manpage files in the distribution archive:
 apply plugin: "distribution"
--- a/picocli-annotation-processing-tests/build.gradle
+++ b/picocli-annotation-processing-tests/build.gradle
@@ -22,19 +22,7 @@
     }
 }
 tasks.withType(Test.class) {
-    if (org.gradle.api.JavaVersion.current().isJava12Compatible()) { // only a problem from Java 16, but okay
+    //if (org.gradle.api.JavaVersion.current().isJava12Compatible()) { // only a problem from Java 16, but okay
         it.jvmArgs '--add-opens=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED' // https://github.com/google/compile-testing/issues/222
-    }
-}
-
-jar {
-    manifest {
-        attributes 'Specification-Title': 'Picocli Annotation Processing Tests',
-                'Specification-Vendor'  : 'Remko Popma',
-                'Specification-Version' : archiveVersion.get(),
-                'Implementation-Title'  : 'Picocli Annotation Processing Tests',
-                'Implementation-Vendor' : 'Remko Popma',
-                'Implementation-Version': archiveVersion.get(),
-                'Automatic-Module-Name' : 'info.picocli.annotation.processing.tests'
-    }
+    //}
 }
--- a/picocli-groovy/build.gradle
+++ b/picocli-groovy/build.gradle
@@ -29,18 +29,6 @@
 ]
 //javadoc.options.linksOffline 'http://docs.groovy-lang.org/2.4.9/html/gapi', 'gradle/javadocs/jdk/9/'
 
-jar {
-    manifest {
-        attributes  'Specification-Title'   : 'Picocli Groovy',
-                    'Specification-Vendor'  : 'Remko Popma',
-                    'Specification-Version' : archiveVersion.get(),
-                    'Implementation-Title'  : 'Picocli Groovy',
-                    'Implementation-Vendor' : 'Remko Popma',
-                    'Implementation-Version': archiveVersion.get(),
-                    'Automatic-Module-Name' : 'info.picocli.groovy'
-    }
-}
-
 ext {
     PUBLISH_GROUP_ID = group
     PUBLISH_ARTIFACT_ID = project.name
--- a/picocli-shell-jline2/build.gradle
+++ b/picocli-shell-jline2/build.gradle
@@ -12,18 +12,6 @@
     testImplementation "junit:junit:$junitVersion"
 }
 
-jar {
-    manifest {
-        attributes  'Specification-Title'   : 'Picocli Shell JLine2',
-                    'Specification-Vendor'  : 'Remko Popma',
-                    'Specification-Version' : archiveVersion.get(),
-                    'Implementation-Title'  : 'Picocli Shell JLine2',
-                    'Implementation-Vendor' : 'Remko Popma',
-                    'Implementation-Version': archiveVersion.get(),
-                    'Automatic-Module-Name' : 'info.picocli.shell.jline2'
-    }
-}
-
 ext {
     PUBLISH_GROUP_ID = group
     PUBLISH_ARTIFACT_ID = project.name
--- a/picocli-shell-jline3/build.gradle
+++ b/picocli-shell-jline3/build.gradle
@@ -15,18 +15,6 @@
     testImplementation "junit:junit:$junitVersion"
 }
 
-jar {
-    manifest {
-        attributes  'Specification-Title'   : 'Picocli Shell JLine3',
-                    'Specification-Vendor'  : 'Remko Popma',
-                    'Specification-Version' : archiveVersion.get(),
-                    'Implementation-Title'  : 'Picocli Shell JLine3',
-                    'Implementation-Vendor' : 'Remko Popma',
-                    'Implementation-Version': archiveVersion.get(),
-                    'Automatic-Module-Name' : 'info.picocli.shell.jline3'
-    }
-}
-
 ext {
     PUBLISH_GROUP_ID = group
     PUBLISH_ARTIFACT_ID = project.name
--- a/picocli-spring-boot-starter/build.gradle
+++ b/picocli-spring-boot-starter/build.gradle
@@ -11,19 +11,7 @@
 dependencies {
     api                 rootProject
     api                 "org.springframework.boot:spring-boot-starter:$springBootVersion"
-    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor:$springBootVersion"
-}
-
-jar {
-    manifest {
-        attributes  'Specification-Title'   : 'Picocli Spring Boot Starter',
-                    'Specification-Vendor'  : 'Remko Popma',
-                    'Specification-Version' : archiveVersion.get(),
-                    'Implementation-Title'  : 'Picocli Spring Boot Starter',
-                    'Implementation-Vendor' : 'Remko Popma',
-                    'Implementation-Version': archiveVersion.get(),
-                    'Automatic-Module-Name' : 'info.picocli.spring'
-    }
+    //annotationProcessor "org.springframework.boot:spring-boot-configuration-processor:$springBootVersion"
 }
 
 ext {
--- a/gradle/publish-mavencentral.gradle
+++ b/gradle/publish-mavencentral.gradle
@@ -1,3 +1,4 @@
+/* disabled for Debian packaging build
 apply plugin: 'java'
 apply plugin: 'distribution'
 apply plugin: 'maven-publish'
@@ -130,3 +131,4 @@
 signing {
     sign publishing.publications
 }
+*/
--- a/picocli-examples/build.gradle
+++ b/picocli-examples/build.gradle
@@ -5,13 +5,13 @@
         mavenCentral()
     }
 
-    dependencies {
-        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.4.31"
-    }
+    //dependencies {
+    //    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.4.31"
+    //}
 }
 
 apply plugin: 'groovy'
-apply plugin: 'kotlin'
+//apply plugin: 'kotlin'
 apply plugin: 'scala'
 apply plugin: 'java-library'
 
@@ -24,7 +24,7 @@
 dependencies {
     api rootProject
     api project(':picocli-groovy')
-    api "org.jetbrains.kotlin:kotlin-stdlib"
+    //api "org.jetbrains.kotlin:kotlin-stdlib"
     api 'org.scala-lang:scala-library:2.13.3'
     ivy            "org.apache.ivy:ivy:$ivyVersion" // for Intelli/J
     implementation "org.codehaus.groovy:groovy-all:$groovyVersion",
@@ -38,7 +38,7 @@
                    "org.hibernate.validator:hibernate-validator-annotation-processor:6.1.2.Final",
                    "javax.el:javax.el-api:3.0.0",
                    "org.glassfish.web:javax.el:2.2.6"
-    implementation "org.jetbrains.kotlin:kotlin-script-runtime:1.4.31"
+    //implementation "org.jetbrains.kotlin:kotlin-script-runtime:1.4.31"
 }
 tasks.withType(GroovyCompile) {
     // this, and the `configurations {ivy}` section, are a workaround for the dreaded
